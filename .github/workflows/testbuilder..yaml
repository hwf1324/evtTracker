name: Build release and publish addon

# Copyright (c) 2023, Luke Davis and Open Source Systems, Ltd..
# If you use this script, I would like to hear about it, just for fun and ego.
# Email at <XLTechie@newanswertech.com>.
# Released under the UNLICENSE. Find full terms at the end of the file.

env:
  publisher: Luke Davis (Open Source Systems)  # Will be used in Add-on store

on:
  push:
    tags: ["*"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
          cache: 'pip'
      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r requirements.txt
          sudo apt-get update  -y
          sudo apt-get install -y gettext
      - name: Code checks
        run: export SKIP=no-commit-to-branch; pre-commit run --all
      - name: building addon
        run: |
          scons
          scons pot
      - uses: actions/upload-artifact@v3
        with:
          name: packaged_addon
          path: |
            ./*.nvda-addon
            ./*.pot

  release_and_publish:
    permissions: write-all
    runs-on: windows-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    needs: ["build"]
    env:
      gh_user_secret: ${{ secrets.PUBLISHER_GITHUB_USER }}
      gh_password_secret: ${{ secrets.PUBLISHER_GITHUB_PASSWORD }}
    steps:
      - uses: actions/checkout@v3
      - name: download release files
        uses: actions/download-artifact@v3
      - name: Release
        id: release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            packaged_addon/*.nvda-addon
            packaged_addon/*.pot
          fail_on_unmatched_files: true
          prerelease: ${{ contains(github.ref, '-') }}
      #- name: output all step outputs
        #shell: pwsh
        #run: Write-Output "${{ join(steps.release.outputs.*, '\n') }}
      - name: Read variables from buildVars.py
        id: readManifest
        # This script concatenates the buildVars.py file, with some
        # other Python code, and pipes that to python in order to
        # print needed variables. Then bash redirects that output into
        # GitHub's persistent variables file for this workflow.
        # It includes logic to set the publish channel based upon the
        # addon_info["addon_updateChannel"] buildVars variable, which
        # not all add-ons have set. Set it if you don't.
        # It is also used by Add-on Updater, and is usually set to
        # None for stable channel, "dev" for dev channel, and doesn't
        # usually support a "beta" channel, though it does in this
        # context. TBD whether this confuses Add-on Updater.
        shell: bash
        run: |
          { cat ./buildVars.py
          cat <<"EOF"
          print(f'buildVars_summary={addon_info["addon_summary"]}')
          print(f'buildVars_version={addon_info["addon_version"]}')
          if addon_info["addon_updateChannel"] is None: addon_info["addon_updateChannel"] = "stable"
          print(f'buildVars_channel={addon_info["addon_updateChannel"]}')
          EOF
          } | python >> $GITHUB_ENV
      - name: Assign release asset URL to a saved variable
        env:
          asset_url: ${{ fromJSON(steps.release.outputs.assets)[0].browser_download_url }}
        shell: bash
        run: echo "release_asset_url=$asset_url" >> $GITHUB_ENV
      - name: Load dependencies
        shell: cmd
        run: |
          pip install selenium
          pip install webdriver-manager
      - name: Publish
        shell: python
        run: |
          """This code makes some assumptions. It requires adjustment if any condition is not going to be met!
          * You have set your GitHub username as a secret variable in GitHub called PUBLISHER_GITHUB_USER.
          * You have set your GitHub password as a secret variable in GitHub called PUBLISHER_GITHUB_PASSWORD.
          (I don't like this requirement, but the process must be done through a logged in web session.)
          * This action is called after a release, either in the same job or its own job.
          * The runner variables are the same as they were for the release (so best called in the same workflow).
          * It's running as part of a tag push.
          * Uses variables derived from buildVars.py, set in a previous included step.
          =====
          Check the variables directly below this comment block.
          They may work out of the box, as they try to derive from buildVars.
          * The submissionTitle is the issue "Title" field, so enter it as you would there.
          """
          from os import environ
          submissionTitle = f'{environ["buildVars_summary"]} {environ["buildVars_version"]}'
          publisher = environ["publisher"]
          channel = environ["buildVars_channel"]  # stable/beta/dev. Currently calculated from buildVars (see above).
          # Setup
          from selenium import webdriver
          from selenium.webdriver.common.by import By
          from selenium.webdriver.common.keys import Keys
          from selenium.webdriver.chrome.service import Service
          from webdriver_manager.chrome import ChromeDriverManager
          from selenium.webdriver.support.ui import Select, WebDriverWait
          from urllib.parse import quote
          from time import sleep
          repoBase = f"https://github.com/{environ['GITHUB_REPOSITORY']}"
          releaseURL = environ["release_asset_url"]
          # Sanity checks
          channel = "stable" if channel is None else channel
          assert repoBase.lower().startswith("https://")  # NV Access requirement
          assert releaseURL.lower().startswith("https://")  # NV Access requirement
          assert releaseURL.lower().endswith(".nvda-addon")  # NV Access requirement
          assert channel in ("stable", "beta", "dev")
          # Start the session
          browser = webdriver.Chrome(service=Service(ChromeDriverManager().install()))
          browser.maximize_window()
          browser.get(
              "https://github.com/nvaccess/addon-datastore/issues/new"
              "?assignees=nvaccess&labels=autoSubmissionFromIssue&template=registerAddon.yml"
              f"&title=%5BSubmit+add-on%5D%3A{quote(submissionTitle)}"
          )
          # Starts on the login form. Get and fill it.
          loginField = browser.find_element(By.ID, "login_field")
          loginField.clear()
          loginField.send_keys(environ["gh_user_secret"])
          passwordField = browser.find_element(By.ID, "password")
          passwordField.clear()
          passwordField.send_keys(environ["gh_password_secret"])
          print("Attempting login.")
          sleep(1)
          passwordField.send_keys(Keys.RETURN)
sleep(10)
          #loginButton = browser.find_element(By.XPATH, value="//input[@data-signin-label='Sign in']").click()
          # Check success
          print(f"Title of page after login was: {browser.title}")
          print("Body of page was:")
          print(browser.body)
          assert browser.title.lower().startswith("new issue")
          # Fill the issue form
          downloadField = browser.find_element(By.ID, "issue_form_download-url")
          downloadField.send_keys(releaseURL)
          sourceField = browser.find_element(By.ID, "issue_form_source-url").send_keys(repoBase)
          publisherField = browser.find_element(By.ID, "issue_form_publisher").send_keys(publisher)
          channelChooser = Select(browser.find_element_by_id("issue_form_channel"))
          channelChooser.select_by_value(channel)
          # Copyright fields default to GPL V2.
          #copyrightTextField = browser.find_element(By.ID, "issue_form_license-name").send_text("GPL V2")
          #copyrightURLField = browser.find_element(By.ID, "issue_form_license-url")
          #copyrightURLField.send_keys("https://www.gnu.org/licenses/gpl-2.0.html")
          print("Submitting...")
          submitButton = browser.find_element(By.XPATH, value="//button[@type='submit']").click()
          print(f"Title after submission was: {browser.title}")
          browser.quit()
